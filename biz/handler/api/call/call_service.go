// Code generated by hertz generator.

package call

import (
	"context"
	"github.com/mutezebra/ClassroomRandomRollCallSystem/app/call/usecase"
	"github.com/mutezebra/ClassroomRandomRollCallSystem/biz/model/base/base"
	consts2 "github.com/mutezebra/ClassroomRandomRollCallSystem/pkg/consts"
	"github.com/mutezebra/ClassroomRandomRollCallSystem/pkg/pack"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	call "github.com/mutezebra/ClassroomRandomRollCallSystem/biz/model/api/call"
)

// CallAllStudent .
// @router /call/auth/call-all-student [POST]
func CallAllStudent(ctx context.Context, c *app.RequestContext) {
	var err error
	var req call.CallAllStudentReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	uid := ctx.Value(consts2.UIDKey).(int64)
	req.UID = &uid

	resp, err := usecase.GetCallUsecase().CallAllStudent(ctx, &req)
	if err != nil {
		resp = new(call.CallAllStudentResp)
		errno := pack.ProcessError(err)
		code, msg := errno.Code(), errno.Error()
		resp.Base = &base.Base{Code: &code, Msg: &msg}
		c.JSON(consts.StatusInternalServerError, resp)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// DoCallEvent .
// @router /call/auth/do-call-event [POST]
func DoCallEvent(ctx context.Context, c *app.RequestContext) {
	var err error
	var req call.DoCallEventReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	uid := ctx.Value(consts2.UIDKey).(int64)
	req.UID = &uid

	resp, err := usecase.GetCallUsecase().DoCallEvent(ctx, &req)
	if err != nil {
		resp = new(call.DoCallEventResp)
		errno := pack.ProcessError(err)
		code, msg := errno.Code(), errno.Error()
		resp.Base = &base.Base{Code: &code, Msg: &msg}
		c.JSON(consts.StatusInternalServerError, resp)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// UndoCallEvents .
// @router /call/auth/undo-call-events [GET]
func UndoCallEvents(ctx context.Context, c *app.RequestContext) {
	var err error
	var req call.UndoCallEventsReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	uid := ctx.Value(consts2.UIDKey).(int64)
	req.UID = &uid

	resp, err := usecase.GetCallUsecase().UndoCallEvents(ctx, &req)
	if err != nil {
		resp = new(call.UndoCallEventsResp)
		errno := pack.ProcessError(err)
		code, msg := errno.Code(), errno.Error()
		resp.Base = &base.Base{Code: &code, Msg: &msg}
		c.JSON(consts.StatusInternalServerError, resp)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// RandomCall .
// @router /call/auth/random-call [POST]
func RandomCall(ctx context.Context, c *app.RequestContext) {
	var err error
	var req call.RandomCallReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	uid := ctx.Value(consts2.UIDKey).(int64)
	req.UID = &uid

	resp, err := usecase.GetCallUsecase().RandomCall(ctx, &req)
	if err != nil {
		resp = new(call.RandomCallResp)
		errno := pack.ProcessError(err)
		code, msg := errno.Code(), errno.Error()
		resp.Base = &base.Base{Code: &code, Msg: &msg}
		c.JSON(consts.StatusInternalServerError, resp)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// HistoryCallEvent .
// @router /call/auth/history-call-event [GET]
func HistoryCallEvent(ctx context.Context, c *app.RequestContext) {
	var err error
	var req call.HistoryCallEventReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	uid := ctx.Value(consts2.UIDKey).(int64)
	req.UID = &uid

	resp, err := usecase.GetCallUsecase().HistoryCallEvent(ctx, &req)
	if err != nil {
		resp = new(call.HistoryCallEventResp)
		errno := pack.ProcessError(err)
		code, msg := errno.Code(), errno.Error()
		resp.Base = &base.Base{Code: &code, Msg: &msg}
		c.JSON(consts.StatusInternalServerError, resp)
		return
	}

	c.JSON(consts.StatusOK, resp)
}
