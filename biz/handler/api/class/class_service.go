// Code generated by hertz generator.

package class

import (
	"context"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/mutezebra/ClassroomRandomRollCallSystem/app/class/usecase"
	class "github.com/mutezebra/ClassroomRandomRollCallSystem/biz/model/api/class"
	"github.com/mutezebra/ClassroomRandomRollCallSystem/biz/model/base/base"
	consts2 "github.com/mutezebra/ClassroomRandomRollCallSystem/pkg/consts"
	"github.com/mutezebra/ClassroomRandomRollCallSystem/pkg/pack"
	"io"
	"mime/multipart"
)

// CreateClass .
// @router /auth/create-class [POST]
func CreateClass(ctx context.Context, c *app.RequestContext) {
	var err error
	var req class.CreateClassReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	uid := ctx.Value(consts2.UIDKey).(int64)
	req.UID = &uid

	resp, err := usecase.GetClassUsecase().CreateClass(ctx, &req)
	if err != nil {
		resp = new(class.CreateClassResp)
		httpcode, errno := pack.ProcessError(err)
		code, msg := errno.Code(), errno.Error()
		resp.Base = &base.Base{Code: &code, Msg: &msg}
		c.JSON(httpcode, resp)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// JoinClass .
// @router /auth/join-class [POST]
func JoinClass(ctx context.Context, c *app.RequestContext) {
	var err error
	var req class.JoinClassReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	uid := ctx.Value(consts2.UIDKey).(int64)
	req.UID = &uid

	resp, err := usecase.GetClassUsecase().JoinClass(ctx, &req)
	if err != nil {
		resp = new(class.JoinClassResp)
		httpcode, errno := pack.ProcessError(err)
		code, msg := errno.Code(), errno.Error()
		resp.Base = &base.Base{Code: &code, Msg: &msg}
		c.JSON(httpcode, resp)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// ClassList .
// @router /class/auth/class-list [GET]
func ClassList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req class.ClassListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	uid := ctx.Value(consts2.UIDKey).(int64)
	req.UID = &uid

	resp, err := usecase.GetClassUsecase().ClassList(ctx, &req)
	if err != nil {
		resp = new(class.ClassListResp)
		httpcode, errno := pack.ProcessError(err)
		code, msg := errno.Code(), errno.Error()
		resp.Base = &base.Base{Code: &code, Msg: &msg}
		c.JSON(httpcode, resp)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// ClassStudentList .
// @router /class/auth/student-list [GET]
func ClassStudentList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req class.ClassStudentListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	uid := ctx.Value(consts2.UIDKey).(int64)
	req.UID = &uid

	resp, err := usecase.GetClassUsecase().ClassStudentList(ctx, &req)
	if err != nil {
		resp = new(class.ClassStudentListResp)
		httpcode, errno := pack.ProcessError(err)
		code, msg := errno.Code(), errno.Error()
		resp.Base = &base.Base{Code: &code, Msg: &msg}
		c.JSON(httpcode, resp)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// ViewInvitationCode .
// @router /class/auth/view-invitation-code [GET]
func ViewInvitationCode(ctx context.Context, c *app.RequestContext) {
	var err error
	var req class.ViewInvitationCodeReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	uid := ctx.Value(consts2.UIDKey).(int64)
	req.UID = &uid

	resp, err := usecase.GetClassUsecase().ViewInvitationCode(ctx, &req)
	if err != nil {
		resp = new(class.ViewInvitationCodeResp)
		httpcode, errno := pack.ProcessError(err)
		code, msg := errno.Code(), errno.Error()
		resp.Base = &base.Base{Code: &code, Msg: &msg}
		c.JSON(httpcode, resp)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// GetClassTeacher .
// @router /class/auth/student-list [GET]
func GetClassTeacher(ctx context.Context, c *app.RequestContext) {
	var err error
	var req class.GetClassTeacherReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	uid := ctx.Value(consts2.UIDKey).(int64)
	req.UID = &uid

	resp, err := usecase.GetClassUsecase().GetClassTeacher(ctx, &req)
	if err != nil {
		resp = new(class.GetClassTeacherResp)
		httpcode, errno := pack.ProcessError(err)
		code, msg := errno.Code(), errno.Error()
		resp.Base = &base.Base{Code: &code, Msg: &msg}
		c.JSON(httpcode, resp)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// ImportUserAndCreateClass .
// @router /class/auth/import [POST]
func ImportUserAndCreateClass(ctx context.Context, c *app.RequestContext) {
	var err error
	var req class.ImportUserAndCreateClassReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	var fh *multipart.FileHeader
	fh, err = c.FormFile("file")
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	req.FileName = &fh.Filename

	var f multipart.File
	f, err = fh.Open()
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	buf, _ := io.ReadAll(f)
	_ = f.Close()
	req.File = buf

	uid := ctx.Value(consts2.UIDKey).(int64)
	req.UID = &uid

	resp, err := usecase.GetClassUsecase().ImportUserAndCreateClass(ctx, &req)
	if err != nil {
		resp = new(class.ImportUserAndCreateClassResp)
		httpcode, errno := pack.ProcessError(err)
		code, msg := errno.Code(), errno.Error()
		resp.Base = &base.Base{Code: &code, Msg: &msg}
		c.JSON(httpcode, resp)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// ChangePoint .
// @router /class/auth/change-point [POST]
func ChangePoint(ctx context.Context, c *app.RequestContext) {
	var err error
	var req class.ChangePointReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	uid := ctx.Value(consts2.UIDKey).(int64)
	req.UID = &uid

	resp, err := usecase.GetClassUsecase().ChangePoint(ctx, &req)
	if err != nil {
		resp = new(class.ChangePointResp)
		httpcode, errno := pack.ProcessError(err)
		code, msg := errno.Code(), errno.Error()
		resp.Base = &base.Base{Code: &code, Msg: &msg}
		c.JSON(httpcode, resp)
		return
	}

	c.JSON(consts.StatusOK, resp)
}
